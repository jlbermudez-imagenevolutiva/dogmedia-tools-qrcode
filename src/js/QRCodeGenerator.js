import { SecurityValidator } from './utils/SecurityValidator.js'
import { FormManager } from './managers/FormManager.js'
import { QRManager } from './managers/QRManager.js'
import { DownloadManager } from './managers/DownloadManager.js'

export class QRCodeGenerator {
  constructor() {
    this.currentType = 'url'
    this.qrCode = null
    this.qrData = null
    this.debounceTimer = null
    
    // Initialize managers
    this.formManager = new FormManager(this)
    this.qrManager = new QRManager(this)
    this.downloadManager = new DownloadManager(this)
    
    this.init()
  }

  init() {
    this.bindEvents()
    this.formManager.init()
  }

  bindEvents() {
    // Type selection buttons
    document.querySelectorAll('.qr-type-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        this.selectType(e.target.closest('.qr-type-btn').dataset.type)
      })
    })

    // Generate button
    document.getElementById('generate-btn').addEventListener('click', () => {
      this.generateQRCode()
    })

    // Download buttons
    document.getElementById('download-png').addEventListener('click', () => {
      this.downloadManager.download('png')
    })

    document.getElementById('download-svg').addEventListener('click', () => {
      this.downloadManager.download('svg')
    })

    // Auto-generate on input changes
    this.bindAutoGenerateEvents()
  }

  bindAutoGenerateEvents() {
    const inputs = document.querySelectorAll('input, textarea, select')
    
    inputs.forEach(input => {
      input.addEventListener('input', () => {
        this.debounceAutoGenerate()
      })
      
      input.addEventListener('change', () => {
        this.debounceAutoGenerate()
      })
    })
  }

  debounceAutoGenerate() {
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer)
    }

    this.debounceTimer = setTimeout(() => {
      this.autoGenerateQRCode()
    }, 300)
  }

  autoGenerateQRCode() {
    if (this.formManager.hasMinimumContent()) {
      this.generateQRCode(true)
    } else {
      this.qrManager.hideQRCode()
    }
  }

  selectType(type) {
    this.currentType = type
    this.formManager.switchType(type)
    this.hideError()
    this.qrManager.hideQRCode()

    setTimeout(() => {
      this.autoGenerateQRCode()
    }, 100)
  }

  generateQRCode(isAutoGenerated = false) {
    if (!isAutoGenerated) {
      this.hideError()
    }
    
    const validation = this.formManager.validateAndSanitizeInput()
    
    if (!validation.isValid) {
      if (!isAutoGenerated) {
        this.showError(validation.errorMessage)
      }
      return
    }

    if (isAutoGenerated) {
      this.hideError()
    }

    try {
      this.qrManager.generateQR(validation.data)
      this.qrData = validation.data
    } catch (error) {
      if (!isAutoGenerated) {
        this.showError('Failed to generate QR code. Please check your input and try again.')
      }
      console.error('QR Generation Error:', error)
    }
  }

  showError(message) {
    const errorDiv = document.getElementById('error-message')
    errorDiv.textContent = SecurityValidator.htmlEncode(message)
    errorDiv.classList.remove('hidden')
  }

  hideError() {
    document.getElementById('error-message').classList.add('hidden')
  }
}